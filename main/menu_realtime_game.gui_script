local output = require "main.OutputText"
local btn_back
local txt_input
local font_id
local char_width
local txt_bg
local txt_bg_selected
local btn_cancel
local ani_caret
local is_txt_selected
local txt_string
local txt_prompt
local btn_send_rt_data_all_players
local btn_send_rt_data_to_players
local btn_register_rt_matchmaker_cb
local btn_unregister_rt_matchmaker_cb
local btn_show_gc_rt_match_ui
local btn_show_gc_rt_add_players_to_match_ui
local btn_show_gc_rt_match_invite_ui
local btn_register_rt_match_cb
local btn_disconnect_rt_match
local btn_default_scale
local btn_pressed_scale

local function reset_input()
	is_txt_selected = false
	txt_string = ""
	gui.set_text(txt_input, txt_string)
	gui.set_enabled(txt_bg, true)
	gui.set_enabled(txt_bg_selected, false)
	gui.set_enabled(ani_caret, false)
	gui.set_enabled(btn_cancel, false)
	gui.set_enabled(txt_prompt, true)
end

local function set_ani_caret_position()
	local blink_x = (gui.get_text_metrics(font_id, txt_string .. ".").width - char_width) + 212 -- 212 is ani_caret starting x position
	gui.set_position(ani_caret, vmath.vector3(blink_x, 1066, 0))
end

local function set_btn_cancel_enabled()
	local length = string.len(txt_string)
	if length < 1 then
		gui.set_enabled(btn_cancel, false)
	else
		gui.set_enabled(btn_cancel, true)
	end
end

function init(self)
	msg.post("#", "disable")
	btn_back = gui.get_node("back/button")
	txt_input = gui.get_node("input/text")
	font_id = gui.get_font(txt_input)
	char_width = gui.get_text_metrics(font_id, ".").width -- char width of "." to concatenate at end of text
	txt_bg = gui.get_node("input/bg")
	txt_bg_selected = gui.get_node("input/selected")
	btn_cancel = gui.get_node("input/cancel")
	ani_caret = gui.get_node("input/blink")
	txt_prompt = gui.get_node("input/prompt")
	reset_input()
	btn_send_rt_data_all_players = gui.get_node("send_rt_data_all_players/button")
	btn_send_rt_data_to_players = gui.get_node("send_rt_data_to_players/button")
	btn_register_rt_matchmaker_cb = gui.get_node("register_rt_matchmaker_cb/button")
	btn_unregister_rt_matchmaker_cb = gui.get_node("unregister_rt_matchmaker_cb/button")
	btn_show_gc_rt_match_ui = gui.get_node("show_gc_rt_match_ui/button")
	btn_show_gc_rt_add_players_to_match_ui = gui.get_node("show_gc_rt_add_players_to_match_ui/button")
	btn_show_gc_rt_match_invite_ui = gui.get_node("show_gc_rt_match_invite_ui/button")
	btn_register_rt_match_cb = gui.get_node("register_rt_match_cb/button")
	btn_disconnect_rt_match = gui.get_node("disconnect_rt_match/button")
	btn_default_scale = vmath.vector3(1, 1, 1)
	btn_pressed_scale = vmath.vector3(1.05, 1.3, 1)
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	if is_txt_selected == true and action_id == hash("type") and not action.repeated then
		--print(">menu_save_game< action.text = " .. action.text)
		txt_string = txt_string .. action.text
		local length = string.len(txt_string)
		-- limit text input to 16 numbers
		if length < 17 then
			gui.set_text(txt_input, txt_string)
		else
			txt_string = string.sub(txt_string, 0, length -1)
		end
		set_ani_caret_position()
		set_btn_cancel_enabled()
	elseif is_txt_selected == true and action_id == hash("backspace") and (action.pressed or action.repeated) then
		local length = string.len(txt_string)
		txt_string = string.sub(txt_string, 0, length -1)
		gui.set_text(txt_input, txt_string)
		set_ani_caret_position()
		set_btn_cancel_enabled()
	end
	if action_id == hash("touch") and action.pressed then
		if gui.pick_node(btn_back, action.x, action.y) then
			gui.set_scale(btn_back, btn_pressed_scale)
		elseif gui.pick_node(btn_send_rt_data_all_players, action.x, action.y) then
			gui.set_scale(btn_send_rt_data_all_players, btn_pressed_scale)
		elseif gui.pick_node(btn_send_rt_data_to_players, action.x, action.y) then
			gui.set_scale(btn_send_rt_data_to_players, btn_pressed_scale)
		elseif gui.pick_node(btn_register_rt_matchmaker_cb, action.x, action.y) then
			gui.set_scale(btn_register_rt_matchmaker_cb, btn_pressed_scale)
		elseif gui.pick_node(btn_unregister_rt_matchmaker_cb, action.x, action.y) then
			gui.set_scale(btn_unregister_rt_matchmaker_cb, btn_pressed_scale)
		elseif gui.pick_node(btn_show_gc_rt_match_ui, action.x, action.y) then
			gui.set_scale(btn_show_gc_rt_match_ui, btn_pressed_scale)
		elseif gui.pick_node(btn_show_gc_rt_add_players_to_match_ui, action.x, action.y) then
			gui.set_scale(btn_show_gc_rt_add_players_to_match_ui, btn_pressed_scale)
		elseif gui.pick_node(btn_show_gc_rt_match_invite_ui, action.x, action.y) then
			gui.set_scale(btn_show_gc_rt_match_invite_ui, btn_pressed_scale)
		elseif gui.pick_node(btn_register_rt_match_cb, action.x, action.y) then
			gui.set_scale(btn_register_rt_match_cb, btn_pressed_scale)
		elseif gui.pick_node(btn_disconnect_rt_match, action.x, action.y) then
			gui.set_scale(btn_disconnect_rt_match, btn_pressed_scale)
		elseif is_txt_selected == false and gui.pick_node(txt_input, action.x, action.y) then
			is_txt_selected = true
			gui.set_enabled(txt_prompt, false)
			gui.set_text(txt_input, txt_string)
			gui.set_enabled(txt_bg, false)
			gui.set_enabled(txt_bg_selected, true)
			set_ani_caret_position()
			gui.set_enabled(ani_caret, true)
			set_btn_cancel_enabled()
			gui.show_keyboard(gui.KEYBOARD_TYPE_DEFAULT, false)
		elseif is_txt_selected == true and gui.pick_node(txt_input, action.x, action.y) == false then
			is_txt_selected = false
			gui.set_enabled(txt_bg, true)
			gui.set_enabled(txt_bg_selected, false)
			gui.set_enabled(ani_caret, false)
			gui.set_enabled(btn_cancel, false)
			local length = string.len(txt_string)
			if length == 0 then
				gui.set_enabled(txt_prompt, true)
			end
			gui.hide_keyboard()
		end
	end
	if action_id == hash("touch") and action.released then
		if gui.pick_node(btn_back, action.x, action.y) then
			gui.set_scale(btn_back, btn_default_scale)
			reset_input()
			msg.post("#menu_main", "enable")
			msg.post("#", "disable")
			gui.hide_keyboard()
		elseif gui.pick_node(btn_send_rt_data_all_players, action.x, action.y) then
			gui.set_scale(btn_send_rt_data_all_players, btn_default_scale)
			local string = gui.get_text(txt_input)
			local length = string.len(string)
			if length > 0 then
				msg.post("/bg#game_center", hash("send_rt_data_all_players"), {data = string})
				reset_input()
			else
				output.text = output.text .. "ALERT, please input data first\n"
				msg.post("/menus#scroll_text", hash("set_output_text"))
			end
			gui.hide_keyboard()
		elseif gui.pick_node(btn_send_rt_data_to_players, action.x, action.y) then
			gui.set_scale(btn_send_rt_data_to_players, btn_default_scale)
			local string = gui.get_text(txt_input)
			local length = string.len(string)
			if length > 0 then
				msg.post("/bg#game_center", hash("send_rt_data_to_players"), {data = string})
				reset_input()
			else
				output.text = output.text .. "ALERT, please input data first\n"
				msg.post("/menus#scroll_text", hash("set_output_text"))
			end
			gui.hide_keyboard()
		elseif gui.pick_node(btn_register_rt_matchmaker_cb, action.x, action.y) then
			gui.set_scale(btn_register_rt_matchmaker_cb, btn_default_scale)
			msg.post("/bg#game_center", hash("register_rt_matchmaker_cb"))
		elseif gui.pick_node(btn_unregister_rt_matchmaker_cb, action.x, action.y) then
			gui.set_scale(btn_unregister_rt_matchmaker_cb, btn_default_scale)
			msg.post("/bg#game_center", hash("unregister_rt_matchmaker_cb"))
		elseif gui.pick_node(btn_show_gc_rt_match_ui, action.x, action.y) then
			gui.set_scale(btn_show_gc_rt_match_ui, btn_default_scale)
			msg.post("/bg#game_center", hash("show_gc_rt_match_ui"))
		elseif gui.pick_node(btn_show_gc_rt_add_players_to_match_ui, action.x, action.y) then
			gui.set_scale(btn_show_gc_rt_add_players_to_match_ui, btn_default_scale)
			msg.post("/bg#game_center", hash("show_gc_rt_add_players_to_match_ui"))
		elseif gui.pick_node(btn_show_gc_rt_match_invite_ui, action.x, action.y) then
			gui.set_scale(btn_show_gc_rt_match_invite_ui, btn_default_scale)
			msg.post("/bg#game_center", hash("show_gc_rt_match_invite_ui"))
		elseif gui.pick_node(btn_register_rt_match_cb, action.x, action.y) then
			gui.set_scale(btn_register_rt_match_cb, btn_default_scale)
			msg.post("/bg#game_center", hash("register_rt_match_cb"))
		elseif gui.pick_node(btn_disconnect_rt_match, action.x, action.y) then
			gui.set_scale(btn_disconnect_rt_match, btn_default_scale)
			msg.post("/bg#game_center", hash("disconnect_rt_match"))
		elseif gui.pick_node(btn_cancel, action.x, action.y) then
			txt_string = ""
			gui.set_text(txt_input, txt_string)
			set_ani_caret_position()
			gui.set_enabled(btn_cancel, false)
		end
	end
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
